package org.sinq

case class Query[T, S](dataSet: DataSet[T], filter: T => Boolean, selector: T => S) {

  def map[R](newSelector: T => R) = Query(dataSet, filter, newSelector)
  
  def foreach(block: S => Unit) = {
    val s = selection
    if (s == null)
      dataSet.select[T](t => t)
    else
      s.foreach(block)
  }
  
  def sortBy[V, K <% Ordered[K]] (f: V => K) (vs: List[V]): List[V] = {
    (vs map f zip vs) sort (_._1 < _._1) map (_._2)
  }

  private def filtered = 
    if (filter == null) 
      null
    else 
      dataSet.where(filter)
  
  private def selection =
    if (selector == null)
      null
    else {
      val f = filtered
      if (f == null)
        dataSet.select(selector)
      else
        f.map(selector)
    }
}
